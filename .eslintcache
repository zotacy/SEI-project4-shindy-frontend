[{"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/index.js":"1","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/reportWebVitals.js":"2","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/App/App.js":"3","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/GameScreen/GameScreen.js":"4","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Afooter/Footer.js":"5","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Login.js":"6","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Signup.js":"7","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Homepage/Homepage.js":"8","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerProfile/PlayerProfile.js":"9","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/App/Aheader/Header.js":"10"},{"size":428,"mtime":1607902372974,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607464753870,"results":"13","hashOfConfig":"12"},{"size":5358,"mtime":1608047574310,"results":"14","hashOfConfig":"12"},{"size":8002,"mtime":1607983102504,"results":"15","hashOfConfig":"12"},{"size":361,"mtime":1607918236324,"results":"16","hashOfConfig":"12"},{"size":918,"mtime":1608048352355,"results":"17","hashOfConfig":"12"},{"size":813,"mtime":1608041718608,"results":"18","hashOfConfig":"12"},{"size":482,"mtime":1607899809392,"results":"19","hashOfConfig":"12"},{"size":2754,"mtime":1608048329563,"results":"20","hashOfConfig":"12"},{"size":989,"mtime":1608043356214,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"111vp5c",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/index.js",[],["48","49"],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/reportWebVitals.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/App/App.js",["50"],"import React, {Component} from 'react';\nimport axios from 'axios';\n// import bootstrap from 'bootstrap';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport './App.css';\n// import Homepage from '../Homepage/Homepage'\nimport PlayerProfile from '../PlayerProfile/PlayerProfile';\nimport Aheader from './Aheader/Header';\nimport Afooter from '../Afooter/Footer';\nimport Login from '../PlayerLogin/Login';\nimport Signup from '../PlayerLogin/Signup';\nimport GameScreen from '../GameScreen/GameScreen';\n\nconst shindyBackendUrl = \"http://localhost:3001/api\"\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      user:{},\n      userId: null,\n      loggedIn:false\n    }\n  }\n  // Methods: Get/Mount Profile\n  componentDidMount=()=>{\n    this.getProfile()\n    localStorage.setItem('userInfo', this.state.user);\n  }\n  getProfile= async()=>{\n    const response = await axios(`${shindyBackendUrl}/users/profile/${this.state.userId}`)\n    this.setState({user:response.data.user})\n    // localStorage.getItem('userInfo');\n  }\n  // Methods: PLayer Authentication (Login, Signup, Logout)\n  signup= async(event)=>{\n    event.preventDefault()\n    await axios.post(`${shindyBackendUrl}/auth/signup`,{\n      name: event.target.name.value,\n      email: event.target.email.value,\n      username: event.target.username.value,\n      password: event.target.password.value,\n    })\n    // this.login()\n    this.getProfile()\n  }\n  login= async(event)=>{\n    event.preventDefault()\n    let response = await axios.post(`${shindyBackendUrl}/auth/login`,{\n      username: event.target.username.value,\n      password: event.target.password.value\n    })\n    console.log(response.data.userId)\n    this.setState({\n      userId: response.data.userId,\n      loggedIn: true\n    })\n    this.getProfile()\n  }\n  logout= async(event)=>{\n    event.preventDefault()\n    await axios.get(`${shindyBackendUrl}/auth/logout`)\n    this.setState({\n          loggedIn: false\n        })\n    // return <Redirect to='/'/>\n    // localStorage.clear()\n  }\n  // Methods: User Profile (Update, Delete)\n  updateProfile = async(event)=>{\n    event.preventDefault()\n    let userId = this.state.userId\n    let response = await axios.put(`${shindyBackendUrl}/users/${userId}`,{\n      name: event.target.name.value,\n      email: event.target.email.value,\n      username: event.target.username.value,\n      password: event.target.password.value,\n      userId: userId\n    })\n    console.log(userId, response)\n    this.getProfile()\n  }\n  deleteProfile = async(event)=>{\n      event.preventDefault()\n      let userId = this.state.userId \n      await axios.delete(`${shindyBackendUrl}/users/${userId}`)\n      this.getProfile()\n  }\n  // Methods: User Characters (Add,Update,Delete)\n  addCharacter = async(event)=>{ //add event because it is connected to a form\n      event.preventDefault()\n      await axios.post(`${shindyBackendUrl}/characters`,{\n        name: event.target.name.value,\n        hp: event.target.hp.value,\n        attack: event.target.attack.value,\n        defense: event.target.defense.value,\n        recover: event.target.recover.value,\n        spd: event.target.spd.value,\n        userId: event.target.userId.value\n      })\n      this.getCharacters()\n  }\n  updateCharacter = async(event)=>{\n      event.preventDefault()\n      let characterId = event.target.characterId.value\n      await axios.put(`${shindyBackendUrl}/characters/${characterId}`,{\n          name: event.target.name.value,\n          characterId: characterId\n      })\n      this.getCharacters()\n  }\n  deleteCharacter = async(event)=>{\n      event.preventDefault()\n      let characterId = event.target.id\n      await axios.delete(`${shindyBackendUrl}/characters/${characterId}`)\n      this.getCharacters()\n  }\n\n  // Render Pages\n  render(){\n    // console.log(this.state)\n    return (\n      <div className=\"body\">\n      <div className=\"App\">\n      {/* Header */}\n        <header className=\"header\">\n        <Aheader {...this.state}{...this.props} logout={this.logout}/>\n        </header>\n      {/* Main Body */}\n        <main className=\"main\"> \n        <Switch>\n            <Route exact path=\"/\" component={(routerProps)=>\n              <GameScreen {...routerProps}/>\n            }/>\n            <Route path=\"/login\" component={(routerProps)=>\n              <Login {...routerProps} userId={this.state.userId} login={this.login}/>\n              // this.state.loggedIn ? <Redirect to={`/profile/${this.state.userId}`}/>\n            }/>\n            <Route path=\"/signup\" component={(routerProps)=>\n              <Signup {...routerProps} user={this.state.user} userId={this.state.userId} signup={this.signup}/>}/>\n            {/* In sign-up route use create character to build \"Shindy Knight\" for new profiles */}\n            <Route path=\"/profile/:id\" component={(routerProps)=>\n              <PlayerProfile {...routerProps} {...this.state}\n                addCharacter={this.addCharacter} updateCharacter={this.updateCharacter} deleteCharacter={this.deleteCharacter}\n                logout={this.logout} updateProfile ={this.updateProfile} deleteProfile={this.deleteProfile}\n              />\n            }/>\n          </Switch>\n        </main>\n      {/* Footer */}\n        <footer className=\"footer\">\n          <Afooter/> \n        </footer>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/GameScreen/GameScreen.js",["51","52","53","54","55","56","57"],"import React, {Component} from 'react';\n// import {Link} from 'react-router-dom';\nimport './GameScreen.css';\n\nclass GameScreen extends Component{\n    constructor(){\n        super()\n        this.state={\n            // userChar: this.props.user.Character[0],\n            player:{\n                title:\"Player\",\n                name: \"User Knight\",\n                maxHp:100,\n                hp: 100,\n                attack: 20,\n                defense: 5,\n                recover: 10,\n                spd: 1,\n            },\n            computer:{\n                title:\"Computer\",\n                name: \"Computer Knight\",\n                maxHp:100,\n                hp: 100,\n                attack: 20,\n                defense: 5,\n                recover: 10,\n                spd: 1,\n            },\n            playerTurn: null,\n            moves:[],\n            disabled:false,\n            // currentTurn:{},\n        }\n    }\n    //Game Logic\n    playGame=()=>{\n        // alert(\"Battle Begin!\")\n        console.log(\"Battle Begin!\")\n        let player= this.state.player;\n        let computer= this.state.computer; \n        let moves = this.state.moves;\n        this.setState({disabled: false})\n        // First Turn\n        if (player.spd === computer.spd && moves.length==0){\n            console.log('speeds match, moves 0')\n            let x=Math.floor(Math.random()*2)\n            if (x===0) {\n                this.setState({playerTurn: false})\n            }\n            else {\n                this.setState({playerTurn: true})\n            }\n        }\n        // this.nextTurn()\n        console.log(\"called\")\n    }\n    \n    // Game Methods\n    attack=()=>{\n        if (this.state.playerTurn === true){\n            let compObj= this.state.computer\n            compObj.hp = compObj.hp - this.state.player.attack\n            this.setState({computer: compObj});\n\n            let action =`You dealt ${this.state.player.attack} damage`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        } else if(this.state.playerTurn === false){\n            let playerObj= this.state.player\n            playerObj.hp = playerObj.hp - this.state.computer.attack\n            this.setState({player: playerObj});\n\n            let action=`You took ${this.state.computer.attack} damage`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        }\n    }\n    block=()=>{\n        if (this.state.playerTurn === true){\n            let action=`You've prepared for an attack`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        } else {\n            let action=`Opponent blocked some of your damage`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        }\n    }\n    recover=()=>{\n        if(this.state.playerTurn === true){\n            let playerObj= this.state.player\n            playerObj.hp = playerObj.hp + this.state.player.recover\n            this.setState({player: playerObj});\n\n            let action=`You recovered ${this.state.player.recover} hp`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        } else if (this.state.playerTurn === false){\n            let compObj= this.state.computer\n            compObj.hp = compObj.hp + this.state.computer.recover\n            this.setState({computer: compObj});\n\n            let action =`Your opponent is looking healthier`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        }\n    }\n    trickery=()=>{\n        const trickStats= ['hp','attack','defense','recover','spd'];\n        let trickStat= trickStats[Math.floor(Math.random()*trickStats.length)]\n        if (this.state.playerTurn === true){\n            let action=`You performed some trickery... ${trickStat} increased`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        } else {\n            let action=`Your opponent is getting into some mischief`\n            console.log(action)\n            this.setState({moves: [...this.state.moves, action]})\n            this.winLogic()\n        }\n    }\n    updateHp=()=>{\n        console.log(`${this.state.title}`)\n    }\n    nextTurn=()=>{ \n        let player= this.state.player;\n        let computer= this.state.computer; \n        let moves = this.state.moves;\n        if (this.state.playerTurn === false){\n            // console.log(`Comp's turn`)\n            // this.state.disabled=true;\n            // let compActions = [this.attack(),this.block(),this.recover(),this.trickery()]\n            // let compAction = compActions[Math.floor(Math.random() * compActions.length)]\n            // console.log(compAction)\n            this.setState({playerTurn: !this.state.playerTurn})\n        } else if (this.state.playerTurn === true){\n            // console.log(`Player's Turn`)\n            // this.state.disabled=false;\n            this.setState({playerTurn: !this.state.playerTurn})\n        }\n        // (player.spd > computer.spd) && (moves[moves.length-1]=='comp' || moves[moves.length-1]==null)){\n    }\n    winLogic=()=>{\n        if (this.state.player.hp == 0){\n            alert(\"You have been defeated\")\n            this.setState({disabled: true})\n        } else if (this.state.computer.hp == 0){\n            alert(\"You are Victorious!\")\n            this.setState({disabled: true})\n        } else {\n            this.nextTurn()\n        }\n    }\n    // Render Game Screen\n    render(){\n        let player= this.state.player;\n        let computer= this.state.computer; \n        let currentTurn= this.currentTurn;\n        // this.nextTurn()\n        console.log(this.state)\n        // console.log(this.state.turn)\n        return(\n            <main>\n                {/* <!-- Player --> */}\n                <div className=\"playerbox\" id=\"player1\">\n                    <div className=\"char\" >\n                        <h2>{player.title}</h2>\n                        <div className=\"hpBar\" hp={this.state.player.hp} maxhp={this.state.player.maxHp}></div>\n                    </div>\n                    <div className=\"actionbox\">\n                        <button className=\"action\" id=\"attack\" onClick={this.attack} disabled={this.state.disabled}>Attack!</button>\n                        <button className=\"action\" id=\"defend\" onClick={this.block} disabled={this.state.disabled}>Block</button>\n                        <button className=\"action\" id=\"recover\" onClick={this.recover} disabled={this.state.disabled}>Recover</button>\n                        <button className=\"action\" id=\"trick\" onClick={this.trickery} disabled={this.state.disabled}>Trickery</button>\n                    </div>\n                </div>\n                    {/* <!-- Middle Space --> */}\n                <div className=\"middle-space\">\n                    <h1 id=\"play\" onClick={this.playGame}>Play</h1>\n                </div>\n                {/* <!-- Computer --> */}\n                <div className=\"playerbox\" id=\"playerC\">\n                    <div className=\"char\" >\n                        <h2>{computer.title}</h2>\n                        <div className=\"hpBar\" hp={this.state.computer.hp} maxhp={this.state.computer.maxHp}></div>\n                    </div>\n                    {/* <div className=\"actionbox\" >\n                        <button className=\"action\" id=\"attack\" >Attack!</button>\n                        <button className=\"action\" id=\"defend\" >Block</button>\n                        <button className=\"action\" id=\"recover\" >Recover</button>\n                        <button className=\"action\" id=\"trick\" >Trickery</button>\n                    </div> */}\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default GameScreen;",["58","59"],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Afooter/Footer.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Login.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Signup.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Homepage/Homepage.js",[],["60","61"],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerProfile/PlayerProfile.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/App/Aheader/Header.js",["62"],"import React, {Component} from 'react';\nimport {Link, Redirect} from 'react-router-dom';\nimport './Header.css'\n\nclass Header extends Component{\n    render(){\n        if (this.props.loggedIn === true) {\n            return(\n                <header className=\"App-header\">\n                    <Link to=\"/\"><h1 id=\"header-link\">Shindy</h1></Link>   \n                    <Link to={`/profile/${this.props.userId}`}><h3>Profile</h3></Link>\n                    <Link to={\"/\"}><button onClick={this.props.logout}>Log out</button></Link>                   \n                </header>\n            )\n        } else {\n            return(\n                <header className=\"App-header\">\n                    <Link to=\"/\"><h1 id=\"header-link\">Shindy</h1></Link>  \n                    <Link to=\"/login\"><button>Login</button></Link>\n                    <Link to=\"/signup\"><button>Signup</button></Link>                     \n                </header>\n            )\n        }\n    }\n}\n\nexport default Header;\n\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":4,"column":24,"nodeType":"69","messageId":"70","endLine":4,"endColumn":32},{"ruleId":"71","severity":1,"message":"72","line":45,"column":56,"nodeType":"73","messageId":"74","endLine":45,"endColumn":58},{"ruleId":"67","severity":1,"message":"75","line":134,"column":13,"nodeType":"69","messageId":"70","endLine":134,"endColumn":19},{"ruleId":"67","severity":1,"message":"76","line":135,"column":13,"nodeType":"69","messageId":"70","endLine":135,"endColumn":21},{"ruleId":"67","severity":1,"message":"77","line":136,"column":13,"nodeType":"69","messageId":"70","endLine":136,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":152,"column":34,"nodeType":"73","messageId":"74","endLine":152,"endColumn":36},{"ruleId":"71","severity":1,"message":"72","line":155,"column":43,"nodeType":"73","messageId":"74","endLine":155,"endColumn":45},{"ruleId":"67","severity":1,"message":"78","line":166,"column":13,"nodeType":"69","messageId":"70","endLine":166,"endColumn":24},{"ruleId":"63","replacedBy":"79"},{"ruleId":"65","replacedBy":"80"},{"ruleId":"63","replacedBy":"81"},{"ruleId":"65","replacedBy":"82"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":15,"nodeType":"69","messageId":"70","endLine":2,"endColumn":23},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'player' is assigned a value but never used.","'computer' is assigned a value but never used.","'moves' is assigned a value but never used.","'currentTurn' is assigned a value but never used.",["83"],["84"],["83"],["84"],"no-global-assign","no-unsafe-negation"]