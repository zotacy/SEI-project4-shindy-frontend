[{"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/index.js":"1","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/reportWebVitals.js":"2","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/App/App.js":"3","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Afooter/Footer.js":"4","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Login.js":"5","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Signup.js":"6","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerProfile/PlayerProfile.js":"7","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Aheader/Header.js":"8","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/GameScreen/Game.js":"9","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/GameScreen/GameV1.js":"10"},{"size":428,"mtime":1607902372974,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607464753870,"results":"13","hashOfConfig":"12"},{"size":6297,"mtime":1608305666513,"results":"14","hashOfConfig":"12"},{"size":361,"mtime":1607918236324,"results":"15","hashOfConfig":"12"},{"size":917,"mtime":1608304119092,"results":"16","hashOfConfig":"12"},{"size":1035,"mtime":1608304054884,"results":"17","hashOfConfig":"12"},{"size":5896,"mtime":1608302383529,"results":"18","hashOfConfig":"12"},{"size":1454,"mtime":1608284169439,"results":"19","hashOfConfig":"12"},{"size":12778,"mtime":1608300541026,"results":"20","hashOfConfig":"12"},{"size":12538,"mtime":1608279195339,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"111vp5c",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/index.js",[],["46","47"],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/reportWebVitals.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/App/App.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Afooter/Footer.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Login.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerLogin/Signup.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/PlayerProfile/PlayerProfile.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/Aheader/Header.js",[],"/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/GameScreen/Game.js",["48","49"],"import React, {Component} from 'react';\nimport './Game.css';\n\n//////// Helper functions\nconst setProp = name => value => obj => ({\n    ...obj,\n    [name]: value\n})\nconst setProp2 = name1 => name2 => value => obj => ({\n    ...obj,\n    [name1]: {\n        ...obj[name1],\n        [name2]: value\n    }\n})\n\n//////// Initial States\nconst initialState = () => ({\n    player: {\n      name: \"Player Knight\",\n      maxHp: 100,\n      hp: 100,\n      attack: 25,\n      defense: 5,\n      recover:10,\n      spd:1,\n      time: 7000,\n    },\n    enemy: {\n        name: \"Comp Knight\",\n        maxHp: 100,\n        hp: 100,\n        attack: 25,\n        defense: 5,\n        recover:10,\n        spd:1,\n        time: 4000,\n    },\n    moveHistory:[],\n    currentTurn: '',\n    disabled:null,\n  })\n\nclass GameScreen extends Component{\n    constructor(props){\n        super(props)\n        this.state = this.props.initialState ? {...this.props.initialState} : {...initialState()}\n    }\n    resetState = () => ({...initialState})\n    // Initialize Game\n    playGame=()=>{\n        alert(\"Battle Begin!\")\n        console.log(\"Battle Begin!\")\n        console.log(this.state)\n        this.resetState()\n        // First Turn\n        if (this.state.player.spd === this.state.enemy.spd){ \n            console.log('Combatants are evenly matched')\n            let x=Math.floor(Math.random()*2)\n            if (x === 0) {\n              console.log(\"Your Opponent takes the first move!\")\n              this.setState({currentTurn: 'Comp'}) //not getting set\n              console.log(this.state.currentTurn)\n            //   this.fullCompTurn()\n              console.log(this.state.currentTurn)\n            }\n            else {\n              console.log(\"You take the first move!\")\n              this.setState({currentTurn: \"Player\"})\n            }\n        }\n        console.log(\"End of first turn\")\n    }\n    // Game Methods\n    attack=()=>{ //Deals damage equilavent to attack stat\n        if (this.state.currentTurn === null){\n            console.log(\"currentTurn Null\")\n        } else if (this.state.currentTurn === \"Player\"){\n            let enemyObj= this.state.enemy\n            let playerAtk= (this.state.player.attack-this.state.enemy.defense)\n            enemyObj.hp = enemyObj.hp - playerAtk\n            this.setState({enemy: enemyObj});\n\n            let action =`You dealt ${playerAtk} damage`\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        } else {\n            let playerObj= this.state.player\n            let compAtk= (this.state.enemy.attack-this.state.player.defense)\n            playerObj.hp = playerObj.hp - compAtk\n            this.setState({player: playerObj});\n\n            let action=`You took ${compAtk} damage`\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        }\n    }\n    block=()=>{ //Raises defense stat (turn-based version)\n        let buffDef=''\n        if (this.state.currentTurn === null){\n            console.log(\"currentTurn Null\")\n        } else if (this.state.currentTurn === \"Player\"){\n            let playerObj= this.state.player\n            if (playerObj.defense < 15){\n                buffDef= 5\n                playerObj.defense = playerObj.defense + buffDef\n            } else if (playerObj.defense <20){\n                buffDef= 1\n                playerObj.defense = playerObj.defense + buffDef\n            } else {\n                buffDef= 'MAXED'\n                console.log('Def is Maxed')\n            }\n            let action=`You've prepared for an attack. (Def + ${buffDef})`\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        } else {\n            let enemyObj= this.state.enemy\n            let action=''\n            if (enemyObj.defense < 15){\n                buffDef= 5\n                enemyObj.defense = enemyObj.defense + buffDef\n                action=`Opponent added armor`\n            } else if (enemyObj.defense < 20){\n                buffDef= 1\n                enemyObj.defense = enemyObj.defense + buffDef\n                action=`Opponent repositioned their armor`\n            } else {\n                buffDef= 'MAXED'\n                action=`Opponent is fiddling with their armor`\n            }\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        }\n    }\n    recover=()=>{ //Recovers Hp equivalent to hp stat\n        if (this.state.currentTurn === null){\n            console.log(\"currentTurn Null\")\n        } else if(this.state.currentTurn === \"Player\"){\n        let playerObj= this.state.player\n            if (playerObj.hp >= playerObj.maxHp) {\n                playerObj.hp = playerObj.maxHp\n                let action=`You are fully recovered`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            } else {\n                playerObj.hp = playerObj.hp + this.state.player.recover\n                this.setState({player: playerObj});\n                let action=`You recovered ${this.state.player.recover} hp`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            }\n        } else {\n        let enemyObj= this.state.enemy\n            if (enemyObj.hp >= enemyObj.maxHp) {\n                enemyObj.hp = enemyObj.maxHp\n                let action=`Your Oppoent is looking healthy`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            } else {\n                enemyObj.hp = enemyObj.hp + this.state.enemy.recover\n                this.setState({enemy: enemyObj});\n                let action =`Your Opponent is looking healthier`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            }\n        }\n    }\n    trickery=()=>{ //Adds a random buff to one of the players stats\n        const trickStats= ['hp','attack','defense','recover']; //add spd stat with priority\n        let trickStat= trickStats[Math.floor(Math.random()*trickStats.length)];\n        let trickVal=0;\n        // Assign trickery values based on action\n        if (trickStat === 'attack'|| trickStat ==='defense'|| trickStat ==='recover'){\n            trickVal= 5;\n        } else if (trickStat === 'hp'){\n            trickVal= 15;\n        }\n        // Apply trickery action to Player/enemy\n        if (this.state.currentTurn === null){\n            console.log(\"currentTurn Null\")\n        } else if (this.state.currentTurn === \"Player\"){\n            let playerObj= this.state.player\n            let oStat= playerObj[`${trickStat}`]\n            // Trickery Buff Caps\n            for (let i=0; i<playerObj.length; i++){\n                if (trickStat === 'attack' && playerObj[`${trickStat}`]>=35){\n                    trickVal = 35-oStat;\n                } else if (trickStat === 'defense' && playerObj[`${trickStat}`]>=20){\n                    trickVal = 20-oStat;\n                } else if (trickStat === 'recover' && playerObj[`${trickStat}`]>=25){\n                    trickVal = 25-oStat;\n                } else if (trickStat === 'hp' && playerObj[`${trickStat}`]>=playerObj.maxHp){\n                    trickVal = playerObj.maxHp-oStat;\n                } \n            }\n            playerObj[`${trickStat}`] = playerObj[`${trickStat}`] + trickVal\n            this.setState({player: playerObj});\n\n            let action=`You performed some trickery... ${trickStat} increased by ${trickVal}`\n            console.log(`${trickStat}: ${playerObj[trickStat]}`)\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        } else {\n            let enemyObj= this.state.enemy\n            let oStat= enemyObj[`${trickStat}`]\n            // Trickery Buff Caps\n            for (let i=0; i<enemyObj.length; i++){\n                if (trickStat === 'attack' && enemyObj[`${trickStat}`]>=35){\n                    trickVal = 35-oStat;\n                } else if (trickStat === 'defense' && enemyObj[`${trickStat}`]>=20){\n                    trickVal = 20-oStat;\n                } else if (trickStat === 'recover' && enemyObj[`${trickStat}`]>=25){\n                    trickVal = 25-oStat;\n                } else if (trickStat === 'hp' && enemyObj[`${trickStat}`]>=enemyObj.maxHp){\n                    trickVal = enemyObj.maxHp-oStat;\n                }\n            }\n            enemyObj[`${trickStat}`] = enemyObj[`${trickStat}`] + trickVal\n            this.setState({enemy: enemyObj});\n\n            let action=`Your Opponent is getting into some mischief`\n            console.log(`${trickStat}: ${enemyObj[trickStat]}`)\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            // this.setState({moveHistory: moveHistory.push(action)})\n            this.winLogic()\n        }\n    }\n    // Turn & Win Logic\n    fullCompTurn=()=>{\n        let compActions = [this.attack,this.block,this.recover,this.trickery]\n        let compAction = compActions[Math.floor(Math.random() * compActions.length)] \n        return compAction()   \n    }\n    nextTurn=()=>{ //Changes state of currentTurn to determine the next turn (Cannot contain CompTurn...)\n        console.log(\"Calling next Turn\")\n        if (this.state.currentTurn === 'Comp'){\n            this.setState({currentTurn: 'Player'})\n            console.log('Player Turn')\n        } else if (this.state.currentTurn === \"Player\"){\n            this.setState({currentTurn: 'Comp'})\n            console.log('Comp Turn')\n        }\n    }\n    winLogic=()=>{\n        console.log('call winLogic')\n        console.log(this.state)\n        if (this.state.player.hp <= 0){\n            alert(\"You have been defeated\")\n            this.setState({disabled:null})\n            console.log(this.state.moveHistory)\n        } else if (this.state.enemy.hp <= 0){\n            alert(\"You are Victorious!\")\n            this.setState({disabled:null})\n            console.log(this.state.moveHistory)\n        } else {\n            this.nextTurn()\n        }\n    }\n    // Render Game Screen\n    render(){\n        let player= this.state.player;\n        let enemy= this.state.enemy;\n        let moveHistory= this.state.moveHistory.map((move,index)=>{\n            // console.log(move)\n            if (index%2===0){\n                return(\n                    <p key={index} id=\"even\">{move}</p>\n                )\n            } else {\n                return(\n                    <p key={index} id=\"odd\">{move}</p>\n                )\n            }\n        })\n        return(\n            <main className=\"gameMain\">\n            <div className=\"gameScreen\">\n                {/* <!-- Player Card--> */}\n                <div className=\"characterbox\" id=\"player1\">\n                    <div className=\"char\" >\n                        <h2>{player.name}</h2>\n                    </div>\n                    <progress id=\"hpBar\" value={this.state.player.hp} max='100'></progress>\n                    {this.state.currentTurn === 'Player' ? \n                        <div className=\"actionbox\">\n                            <button className=\"action\" id=\"attack\" onClick={this.attack}>Attack!</button>\n                            <button className=\"action\" id=\"defend\" onClick={this.block}>Block</button>\n                            <button className=\"action\" id=\"recover\" onClick={this.recover}>Recover</button>\n                            <button className=\"action\" id=\"trick\" onClick={this.trickery}>Trickery</button>\n                        </div>\n                    : this.state.disabled\n                    }\n                </div>\n                    {/* <!-- Middle Space --> */}\n                <div className=\"middle-space\">\n                    <h1 id=\"play\" onClick={this.playGame}>Play</h1>\n                </div>\n                {/* <!-- Enemy Card--> */}\n                <div className=\"characterbox\" id=\"playerC\">\n                    <div className=\"char\" >\n                        <h2>{enemy.name}</h2>\n                    </div>\n                    <progress id=\"hpBar\" value={this.state.enemy.hp} max='100'></progress>\n                    {this.state.currentTurn ==='Comp' \n                        ? <button className=\"action\" id=\"randAction\" onClick={this.fullCompTurn}>Comp Action</button> \n                        : this.state.disabled\n                    }\n                </div>\n            </div>\n            <div className=\"mhContainer\">\n                <h2 id=\"title\">Move History</h2><br/>\n                <div className=\"moveHistory\">\n                    {moveHistory}\n                </div>\n            </div>\n            </main>\n        )\n    }\n}\n\nexport default GameScreen;","/Users/zt06224/sei/projects/SEI-project4-shindy/shindy/src/components/GameScreen/GameV1.js",["50"],"// Code retrieved from https://www.codementor.io/@danielmbfm/a-react-rpg-game-ehxpd4p4q\nimport React, {Component} from 'react';\nimport './Game.css';\n\n//////// Helper functions\nconst setProp = name => value => obj => ({\n    ...obj,\n    [name]: value\n})\nconst setProp2 = name1 => name2 => value => obj => ({\n    ...obj,\n    [name1]: {\n        ...obj[name1],\n        [name2]: value\n    }\n})\n\n//////// Initial States\nconst initialState = () => ({\n    playerStats: {\n      name: \"Player\",\n      maxHp: 100,\n      hp: 100,\n      attack: 25,\n      defense: 5,\n      recover:10,\n      spd:1,\n      time: 7000,\n    },\n    enemyStats: {\n        name: \"Opponent\",\n        maxHp: 100,\n        hp: 100,\n        attack: 25,\n        defense: 5,\n        recover:10,\n        spd:1,\n        time: 4000,\n    },\n    moveHistory:[],\n    isPlayerTurn: false,\n    isRunning: false,\n  })\n\nconst setIsRunning = setProp('isRunning')\nconst setIsPlayerTurn = setProp('isPlayerTurn')\nconst setPlayerHp = setProp2('playerStats')('hp')\nconst setEnemyHp =  setProp2('enemyStats')('hp')\nconst resetState = () => ({...initialState})\n\n//////// Game Logic\nclass Game extends Component{\n    constructor(props){\n        super(props)\n        this.state = this.props.initialState ? {...this.props.initialState} : {...initialState()}\n    }\n    /// Start, Change playerTurn, End\n    onStart=()=> {this.setState(setIsRunning(true))}\n    onPlayerTurn() {this.setState(setIsPlayerTurn(true))}\n    onEnemyTurn() {\n        let newHp = this.getNewHp(this.state.enemyStats, this.state.playerStats)\n        if (newHp <= 0) {\n          this.endGame()\n          return\n        }\n        console.log(\"enemy\", newHp)\n        this.setState(setPlayerHp(newHp))\n    }\n    endGame() {this.setState(state => initialState())}\n\n    /// Turns\n    playerAction() {  \n        let newHp = this.getNewHp(this.state.playerStats, this.state.enemyStats)\n        if (newHp <= 0) {\n          this.endGame()\n          return\n        }\n        this.setState(state => setIsPlayerTurn(false)(setEnemyHp(newHp)(state))) \n      }\n    getNewHp(from, to) {\n        let seed = Math.random()\n        //let damage = Math.floor(Math.max(0, Math.abs(from.attack  - to.defense) * seed))\n        let damage = Math.floor(seed * ( (50 - to.defense/4) + Math.max(0, from.attack  - to.defense)/2)) \n        return to.hp - damage\n    }\n\n    // Action Methods\n    attack=()=>{ //Deals damage equilavent to attack stat\n        if (this.state.playerTurn === null){\n            console.log(\"PlayerTurn Null\")\n        } else if (this.state.playerTurn === true){\n            let compObj= this.state.computer\n            let playerAtk= (this.state.player.attack-this.state.computer.defense)\n            compObj.hp = compObj.hp - playerAtk\n            this.setState({computer: compObj});\n\n            let action =`You dealt ${playerAtk} damage`\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        } else {\n            let playerObj= this.state.player\n            let compAtk= (this.state.computer.attack-this.state.player.defense)\n            playerObj.hp = playerObj.hp - compAtk\n            this.setState({player: playerObj});\n\n            let action=`You took ${compAtk} damage`\n            console.log(action)\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        }\n    }\n    block=()=>{ //Raises defense stat (turn-based version)\n        let buffDef=''\n        if (this.state.playerTurn === null){\n            console.log(\"PlayerTurn Null\")\n        } else if (this.state.playerTurn === true){\n            let playerObj= this.state.player\n            if (playerObj.defense < 15){\n                buffDef= 5\n                playerObj.defense = playerObj.defense + buffDef\n            } else if (playerObj.defense <20){\n                buffDef= 1\n                playerObj.defense = playerObj.defense + buffDef\n            } else {\n                buffDef= 'MAXED'\n                console.log('Def is Maxed')\n            }\n            let action=`You've prepared for an attack. (Def + ${buffDef})`\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        } else {\n            let compObj= this.state.computer\n            let action=''\n            if (compObj.defense < 15){\n                buffDef= 5\n                compObj.defense = compObj.defense + buffDef\n                action=`Opponent added armor`\n            } else if (compObj.defense < 20){\n                buffDef= 1\n                compObj.defense = compObj.defense + buffDef\n                action=`Opponent repositioned their armor`\n            } else {\n                buffDef= 'MAXED'\n                action=`Opponent is fiddling with their armor`\n            }\n            console.log(action)\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        }\n    }\n    recover=()=>{ //Recovers Hp equivalent to hp stat\n        if (this.state.playerTurn === null){\n            console.log(\"PlayerTurn Null\")\n        } else if(this.state.playerTurn === true){\n        let playerObj= this.state.player\n            if (playerObj.hp >= playerObj.maxHp) {\n                playerObj.hp = playerObj.maxHp\n                let action=`You are fully recovered`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            } else {\n                playerObj.hp = playerObj.hp + this.state.player.recover\n                this.setState({player: playerObj});\n                let action=`You recovered ${this.state.player.recover} hp`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            }\n        } else {\n        let compObj= this.state.computer\n            if (compObj.hp >= compObj.maxHp) {\n                compObj.hp = compObj.maxHp\n                let action=`Your Oppoent is looking healthy`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            } else {\n                compObj.hp = compObj.hp + this.state.computer.recover\n                this.setState({computer: compObj});\n                let action =`Your Opponent is looking healthier`\n                this.setState({moveHistory: [...this.state.moveHistory, action]})\n                this.winLogic()\n            }\n        }\n    }\n    trickery=()=>{ //Adds a random buff to one of the players stats\n        const trickStats= ['hp','attack','defense','recover']; //add spd stat with priority\n        let trickStat= trickStats[Math.floor(Math.random()*trickStats.length)];\n        let trickVal=0;\n        // Assign trickery values based on action\n        if (trickStat === 'attack'|| trickStat ==='defense'|| trickStat ==='recover'){\n            trickVal= 5;\n        } else if (trickStat === 'hp'){\n            trickVal= 15;\n        }\n        // Apply trickery action to Player/Computer\n        if (this.state.playerTurn === null){\n            console.log(\"PlayerTurn Null\")\n        } else if (this.state.playerTurn === true){\n            let playerObj= this.state.player\n            let oStat= playerObj[`${trickStat}`]\n            // Trickery Buff Caps\n            for (let i=0; i<playerObj.length; i++){\n                if (trickStat === 'attack' && playerObj[`${trickStat}`]>=35){\n                    trickVal = 35-oStat;\n                } else if (trickStat === 'defense' && playerObj[`${trickStat}`]>=20){\n                    trickVal = 20-oStat;\n                } else if (trickStat === 'recover' && playerObj[`${trickStat}`]>=25){\n                    trickVal = 25-oStat;\n                } else if (trickStat === 'hp' && playerObj[`${trickStat}`]>=playerObj.maxHp){\n                    trickVal = playerObj.maxHp-oStat;\n                } \n            }\n            playerObj[`${trickStat}`] = playerObj[`${trickStat}`] + trickVal\n            this.setState({player: playerObj});\n\n            let action=`You performed some trickery... ${trickStat} increased by ${trickVal}`\n            console.log(`${trickStat}: ${playerObj[trickStat]}`)\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            this.winLogic()\n        } else {\n            let compObj= this.state.computer\n            let oStat= compObj[`${trickStat}`]\n            // Trickery Buff Caps\n            for (let i=0; i<compObj.length; i++){\n                if (trickStat === 'attack' && compObj[`${trickStat}`]>=35){\n                    trickVal = 35-oStat;\n                } else if (trickStat === 'defense' && compObj[`${trickStat}`]>=20){\n                    trickVal = 20-oStat;\n                } else if (trickStat === 'recover' && compObj[`${trickStat}`]>=25){\n                    trickVal = 25-oStat;\n                } else if (trickStat === 'hp' && compObj[`${trickStat}`]>=compObj.maxHp){\n                    trickVal = compObj.maxHp-oStat;\n                }\n            }\n            compObj[`${trickStat}`] = compObj[`${trickStat}`] + trickVal\n            this.setState({computer: compObj});\n\n            let action=`Your Opponent is getting into some mischief`\n            console.log(`${trickStat}: ${compObj[trickStat]}`)\n            this.setState({moveHistory: [...this.state.moveHistory, action]})\n            // this.setState({moveHistory: moveHistory.push(action)})\n            this.winLogic()\n        }\n    }\n\n    ///Render\n    render(){\n        // if (!this.state.isRunning) {\n        //     return (\n        //       <div className=\"game-wrapper\">                \n        //         <button start={this.onStart.bind(this)}>Start</button>        \n        //       </div>\n        //     )\n        // } \n        let moveHistory= this.state.moveHistory.map((move,index)=>{\n            if (index%2===0){\n                return(\n                    <p key={index} id=\"even\">{move}</p>\n                )\n            } else {\n                return(\n                    <p key={index} id=\"odd\">{move}</p>\n                )\n            }\n        })\n        \n        return (\n            <main className=\"gameMain\">\n            <div className=\"gameScreen\">\n                {/* <!-- Player --> */}\n                <div className=\"characterbox\" id=\"player1\">\n                    <div className=\"char\" >\n                        <h2>{this.state.playerStats.name}</h2>\n                        <progress id=\"hpBar\" value={this.state.playerStats.hp} max='100'></progress>\n                    </div>\n                    {this.state.playerTurn ? \n                        <div className=\"actionbox\">\n                            <button className=\"action\" id=\"attack\" onmousedown={this.attack} onmouseup={this.playerAction}>Attack!</button>\n                            <button className=\"action\" id=\"defend\" onmousedown={this.block} onmouseup={this.playerAction}>Block</button>\n                            <button className=\"action\" id=\"recover\" onmousedown={this.recover} onmouseup={this.playerAction}>Recover</button>\n                            <button className=\"action\" id=\"trick\" onmousedown={this.trickery} onmouseup={this.playerAction}>Trickery</button>\n                        </div>\n                    : this.state.disabled || this.state.isRunning===false\n                    }\n                </div>\n                    {/* <!-- Middle Space --> */}\n                <div className=\"middle-space\">\n                    <h1 id=\"play\" onClick={this.onStart}>Play</h1>\n                </div>\n                {/* <!-- Computer --> */}\n                <div className=\"characterbox\" id=\"playerC\">\n                    <div className=\"char\" >\n                        <h2>{this.state.enemyStats.name}</h2>\n                        <progress id=\"hpBar\" value={this.state.enemyStats.hp} max='100'></progress>\n                    </div>\n                    {this.state.playerTurn || this.state.isRunning===false ? this.state.disabled :\n                        <div className=\"actionbox\">\n                            <button>Opponent's turn</button>\n                            {/* {this.state.enemyAction} */}\n                        </div>\n                    }\n                </div>\n            </div>\n            <div className=\"mhContainer\">\n                <h2 id=\"title\">Move History</h2><br/>\n                <div className=\"moveHistory\">\n                    {moveHistory}\n                </div>\n            </div>\n            </main>\n        )\n    }\n}\n\nexport default Game;",["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":5,"column":7,"nodeType":"59","messageId":"60","endLine":5,"endColumn":14},{"ruleId":"57","severity":1,"message":"61","line":9,"column":7,"nodeType":"59","messageId":"60","endLine":9,"endColumn":15},{"ruleId":"57","severity":1,"message":"62","line":49,"column":7,"nodeType":"59","messageId":"60","endLine":49,"endColumn":17},{"ruleId":"53","replacedBy":"63"},{"ruleId":"55","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'setProp' is assigned a value but never used.","Identifier","unusedVar","'setProp2' is assigned a value but never used.","'resetState' is assigned a value but never used.",["65"],["66"],"no-global-assign","no-unsafe-negation"]